
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Barbeiro` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Barbeiro
 * 
 */
export type BarbeiroModel = runtime.Types.Result.DefaultSelection<Prisma.$BarbeiroPayload>

export type AggregateBarbeiro = {
  _count: BarbeiroCountAggregateOutputType | null
  _avg: BarbeiroAvgAggregateOutputType | null
  _sum: BarbeiroSumAggregateOutputType | null
  _min: BarbeiroMinAggregateOutputType | null
  _max: BarbeiroMaxAggregateOutputType | null
}

export type BarbeiroAvgAggregateOutputType = {
  id: number | null
  telefone: number | null
}

export type BarbeiroSumAggregateOutputType = {
  id: number | null
  telefone: number | null
}

export type BarbeiroMinAggregateOutputType = {
  id: number | null
  name: string | null
  telefone: number | null
  password: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type BarbeiroMaxAggregateOutputType = {
  id: number | null
  name: string | null
  telefone: number | null
  password: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type BarbeiroCountAggregateOutputType = {
  id: number
  name: number
  telefone: number
  password: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type BarbeiroAvgAggregateInputType = {
  id?: true
  telefone?: true
}

export type BarbeiroSumAggregateInputType = {
  id?: true
  telefone?: true
}

export type BarbeiroMinAggregateInputType = {
  id?: true
  name?: true
  telefone?: true
  password?: true
  createdAt?: true
  updatedAt?: true
}

export type BarbeiroMaxAggregateInputType = {
  id?: true
  name?: true
  telefone?: true
  password?: true
  createdAt?: true
  updatedAt?: true
}

export type BarbeiroCountAggregateInputType = {
  id?: true
  name?: true
  telefone?: true
  password?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type BarbeiroAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Barbeiro to aggregate.
   */
  where?: Prisma.BarbeiroWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Barbeiros to fetch.
   */
  orderBy?: Prisma.BarbeiroOrderByWithRelationInput | Prisma.BarbeiroOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BarbeiroWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Barbeiros from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Barbeiros.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Barbeiros
  **/
  _count?: true | BarbeiroCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: BarbeiroAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: BarbeiroSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BarbeiroMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BarbeiroMaxAggregateInputType
}

export type GetBarbeiroAggregateType<T extends BarbeiroAggregateArgs> = {
      [P in keyof T & keyof AggregateBarbeiro]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBarbeiro[P]>
    : Prisma.GetScalarType<T[P], AggregateBarbeiro[P]>
}




export type BarbeiroGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BarbeiroWhereInput
  orderBy?: Prisma.BarbeiroOrderByWithAggregationInput | Prisma.BarbeiroOrderByWithAggregationInput[]
  by: Prisma.BarbeiroScalarFieldEnum[] | Prisma.BarbeiroScalarFieldEnum
  having?: Prisma.BarbeiroScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BarbeiroCountAggregateInputType | true
  _avg?: BarbeiroAvgAggregateInputType
  _sum?: BarbeiroSumAggregateInputType
  _min?: BarbeiroMinAggregateInputType
  _max?: BarbeiroMaxAggregateInputType
}

export type BarbeiroGroupByOutputType = {
  id: number
  name: string
  telefone: number
  password: string
  createdAt: Date
  updatedAt: Date
  _count: BarbeiroCountAggregateOutputType | null
  _avg: BarbeiroAvgAggregateOutputType | null
  _sum: BarbeiroSumAggregateOutputType | null
  _min: BarbeiroMinAggregateOutputType | null
  _max: BarbeiroMaxAggregateOutputType | null
}

type GetBarbeiroGroupByPayload<T extends BarbeiroGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BarbeiroGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BarbeiroGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BarbeiroGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BarbeiroGroupByOutputType[P]>
      }
    >
  >



export type BarbeiroWhereInput = {
  AND?: Prisma.BarbeiroWhereInput | Prisma.BarbeiroWhereInput[]
  OR?: Prisma.BarbeiroWhereInput[]
  NOT?: Prisma.BarbeiroWhereInput | Prisma.BarbeiroWhereInput[]
  id?: Prisma.IntFilter<"Barbeiro"> | number
  name?: Prisma.StringFilter<"Barbeiro"> | string
  telefone?: Prisma.IntFilter<"Barbeiro"> | number
  password?: Prisma.StringFilter<"Barbeiro"> | string
  createdAt?: Prisma.DateTimeFilter<"Barbeiro"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Barbeiro"> | Date | string
}

export type BarbeiroOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  telefone?: Prisma.SortOrder
  password?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BarbeiroWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  telefone?: number
  AND?: Prisma.BarbeiroWhereInput | Prisma.BarbeiroWhereInput[]
  OR?: Prisma.BarbeiroWhereInput[]
  NOT?: Prisma.BarbeiroWhereInput | Prisma.BarbeiroWhereInput[]
  name?: Prisma.StringFilter<"Barbeiro"> | string
  password?: Prisma.StringFilter<"Barbeiro"> | string
  createdAt?: Prisma.DateTimeFilter<"Barbeiro"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Barbeiro"> | Date | string
}, "id" | "telefone">

export type BarbeiroOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  telefone?: Prisma.SortOrder
  password?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.BarbeiroCountOrderByAggregateInput
  _avg?: Prisma.BarbeiroAvgOrderByAggregateInput
  _max?: Prisma.BarbeiroMaxOrderByAggregateInput
  _min?: Prisma.BarbeiroMinOrderByAggregateInput
  _sum?: Prisma.BarbeiroSumOrderByAggregateInput
}

export type BarbeiroScalarWhereWithAggregatesInput = {
  AND?: Prisma.BarbeiroScalarWhereWithAggregatesInput | Prisma.BarbeiroScalarWhereWithAggregatesInput[]
  OR?: Prisma.BarbeiroScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BarbeiroScalarWhereWithAggregatesInput | Prisma.BarbeiroScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Barbeiro"> | number
  name?: Prisma.StringWithAggregatesFilter<"Barbeiro"> | string
  telefone?: Prisma.IntWithAggregatesFilter<"Barbeiro"> | number
  password?: Prisma.StringWithAggregatesFilter<"Barbeiro"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Barbeiro"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Barbeiro"> | Date | string
}

export type BarbeiroCreateInput = {
  name: string
  telefone: number
  password: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BarbeiroUncheckedCreateInput = {
  id?: number
  name: string
  telefone: number
  password: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BarbeiroUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  telefone?: Prisma.IntFieldUpdateOperationsInput | number
  password?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BarbeiroUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  telefone?: Prisma.IntFieldUpdateOperationsInput | number
  password?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BarbeiroCreateManyInput = {
  id?: number
  name: string
  telefone: number
  password: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BarbeiroUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  telefone?: Prisma.IntFieldUpdateOperationsInput | number
  password?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BarbeiroUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  telefone?: Prisma.IntFieldUpdateOperationsInput | number
  password?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BarbeiroCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  telefone?: Prisma.SortOrder
  password?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BarbeiroAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  telefone?: Prisma.SortOrder
}

export type BarbeiroMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  telefone?: Prisma.SortOrder
  password?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BarbeiroMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  telefone?: Prisma.SortOrder
  password?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BarbeiroSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  telefone?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}



export type BarbeiroSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  telefone?: boolean
  password?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["barbeiro"]>

export type BarbeiroSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  telefone?: boolean
  password?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["barbeiro"]>

export type BarbeiroSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  telefone?: boolean
  password?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["barbeiro"]>

export type BarbeiroSelectScalar = {
  id?: boolean
  name?: boolean
  telefone?: boolean
  password?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type BarbeiroOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "telefone" | "password" | "createdAt" | "updatedAt", ExtArgs["result"]["barbeiro"]>

export type $BarbeiroPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Barbeiro"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    telefone: number
    password: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["barbeiro"]>
  composites: {}
}

export type BarbeiroGetPayload<S extends boolean | null | undefined | BarbeiroDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BarbeiroPayload, S>

export type BarbeiroCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BarbeiroFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BarbeiroCountAggregateInputType | true
  }

export interface BarbeiroDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Barbeiro'], meta: { name: 'Barbeiro' } }
  /**
   * Find zero or one Barbeiro that matches the filter.
   * @param {BarbeiroFindUniqueArgs} args - Arguments to find a Barbeiro
   * @example
   * // Get one Barbeiro
   * const barbeiro = await prisma.barbeiro.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BarbeiroFindUniqueArgs>(args: Prisma.SelectSubset<T, BarbeiroFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BarbeiroClient<runtime.Types.Result.GetResult<Prisma.$BarbeiroPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Barbeiro that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BarbeiroFindUniqueOrThrowArgs} args - Arguments to find a Barbeiro
   * @example
   * // Get one Barbeiro
   * const barbeiro = await prisma.barbeiro.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BarbeiroFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BarbeiroFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BarbeiroClient<runtime.Types.Result.GetResult<Prisma.$BarbeiroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Barbeiro that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BarbeiroFindFirstArgs} args - Arguments to find a Barbeiro
   * @example
   * // Get one Barbeiro
   * const barbeiro = await prisma.barbeiro.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BarbeiroFindFirstArgs>(args?: Prisma.SelectSubset<T, BarbeiroFindFirstArgs<ExtArgs>>): Prisma.Prisma__BarbeiroClient<runtime.Types.Result.GetResult<Prisma.$BarbeiroPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Barbeiro that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BarbeiroFindFirstOrThrowArgs} args - Arguments to find a Barbeiro
   * @example
   * // Get one Barbeiro
   * const barbeiro = await prisma.barbeiro.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BarbeiroFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BarbeiroFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BarbeiroClient<runtime.Types.Result.GetResult<Prisma.$BarbeiroPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Barbeiros that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BarbeiroFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Barbeiros
   * const barbeiros = await prisma.barbeiro.findMany()
   * 
   * // Get first 10 Barbeiros
   * const barbeiros = await prisma.barbeiro.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const barbeiroWithIdOnly = await prisma.barbeiro.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BarbeiroFindManyArgs>(args?: Prisma.SelectSubset<T, BarbeiroFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BarbeiroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Barbeiro.
   * @param {BarbeiroCreateArgs} args - Arguments to create a Barbeiro.
   * @example
   * // Create one Barbeiro
   * const Barbeiro = await prisma.barbeiro.create({
   *   data: {
   *     // ... data to create a Barbeiro
   *   }
   * })
   * 
   */
  create<T extends BarbeiroCreateArgs>(args: Prisma.SelectSubset<T, BarbeiroCreateArgs<ExtArgs>>): Prisma.Prisma__BarbeiroClient<runtime.Types.Result.GetResult<Prisma.$BarbeiroPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Barbeiros.
   * @param {BarbeiroCreateManyArgs} args - Arguments to create many Barbeiros.
   * @example
   * // Create many Barbeiros
   * const barbeiro = await prisma.barbeiro.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BarbeiroCreateManyArgs>(args?: Prisma.SelectSubset<T, BarbeiroCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Barbeiros and returns the data saved in the database.
   * @param {BarbeiroCreateManyAndReturnArgs} args - Arguments to create many Barbeiros.
   * @example
   * // Create many Barbeiros
   * const barbeiro = await prisma.barbeiro.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Barbeiros and only return the `id`
   * const barbeiroWithIdOnly = await prisma.barbeiro.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BarbeiroCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BarbeiroCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BarbeiroPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Barbeiro.
   * @param {BarbeiroDeleteArgs} args - Arguments to delete one Barbeiro.
   * @example
   * // Delete one Barbeiro
   * const Barbeiro = await prisma.barbeiro.delete({
   *   where: {
   *     // ... filter to delete one Barbeiro
   *   }
   * })
   * 
   */
  delete<T extends BarbeiroDeleteArgs>(args: Prisma.SelectSubset<T, BarbeiroDeleteArgs<ExtArgs>>): Prisma.Prisma__BarbeiroClient<runtime.Types.Result.GetResult<Prisma.$BarbeiroPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Barbeiro.
   * @param {BarbeiroUpdateArgs} args - Arguments to update one Barbeiro.
   * @example
   * // Update one Barbeiro
   * const barbeiro = await prisma.barbeiro.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BarbeiroUpdateArgs>(args: Prisma.SelectSubset<T, BarbeiroUpdateArgs<ExtArgs>>): Prisma.Prisma__BarbeiroClient<runtime.Types.Result.GetResult<Prisma.$BarbeiroPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Barbeiros.
   * @param {BarbeiroDeleteManyArgs} args - Arguments to filter Barbeiros to delete.
   * @example
   * // Delete a few Barbeiros
   * const { count } = await prisma.barbeiro.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BarbeiroDeleteManyArgs>(args?: Prisma.SelectSubset<T, BarbeiroDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Barbeiros.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BarbeiroUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Barbeiros
   * const barbeiro = await prisma.barbeiro.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BarbeiroUpdateManyArgs>(args: Prisma.SelectSubset<T, BarbeiroUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Barbeiros and returns the data updated in the database.
   * @param {BarbeiroUpdateManyAndReturnArgs} args - Arguments to update many Barbeiros.
   * @example
   * // Update many Barbeiros
   * const barbeiro = await prisma.barbeiro.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Barbeiros and only return the `id`
   * const barbeiroWithIdOnly = await prisma.barbeiro.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BarbeiroUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BarbeiroUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BarbeiroPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Barbeiro.
   * @param {BarbeiroUpsertArgs} args - Arguments to update or create a Barbeiro.
   * @example
   * // Update or create a Barbeiro
   * const barbeiro = await prisma.barbeiro.upsert({
   *   create: {
   *     // ... data to create a Barbeiro
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Barbeiro we want to update
   *   }
   * })
   */
  upsert<T extends BarbeiroUpsertArgs>(args: Prisma.SelectSubset<T, BarbeiroUpsertArgs<ExtArgs>>): Prisma.Prisma__BarbeiroClient<runtime.Types.Result.GetResult<Prisma.$BarbeiroPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Barbeiros.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BarbeiroCountArgs} args - Arguments to filter Barbeiros to count.
   * @example
   * // Count the number of Barbeiros
   * const count = await prisma.barbeiro.count({
   *   where: {
   *     // ... the filter for the Barbeiros we want to count
   *   }
   * })
  **/
  count<T extends BarbeiroCountArgs>(
    args?: Prisma.Subset<T, BarbeiroCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BarbeiroCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Barbeiro.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BarbeiroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BarbeiroAggregateArgs>(args: Prisma.Subset<T, BarbeiroAggregateArgs>): Prisma.PrismaPromise<GetBarbeiroAggregateType<T>>

  /**
   * Group by Barbeiro.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BarbeiroGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BarbeiroGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BarbeiroGroupByArgs['orderBy'] }
      : { orderBy?: BarbeiroGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BarbeiroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBarbeiroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Barbeiro model
 */
readonly fields: BarbeiroFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Barbeiro.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BarbeiroClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Barbeiro model
 */
export interface BarbeiroFieldRefs {
  readonly id: Prisma.FieldRef<"Barbeiro", 'Int'>
  readonly name: Prisma.FieldRef<"Barbeiro", 'String'>
  readonly telefone: Prisma.FieldRef<"Barbeiro", 'Int'>
  readonly password: Prisma.FieldRef<"Barbeiro", 'String'>
  readonly createdAt: Prisma.FieldRef<"Barbeiro", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Barbeiro", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Barbeiro findUnique
 */
export type BarbeiroFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Barbeiro
   */
  select?: Prisma.BarbeiroSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Barbeiro
   */
  omit?: Prisma.BarbeiroOmit<ExtArgs> | null
  /**
   * Filter, which Barbeiro to fetch.
   */
  where: Prisma.BarbeiroWhereUniqueInput
}

/**
 * Barbeiro findUniqueOrThrow
 */
export type BarbeiroFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Barbeiro
   */
  select?: Prisma.BarbeiroSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Barbeiro
   */
  omit?: Prisma.BarbeiroOmit<ExtArgs> | null
  /**
   * Filter, which Barbeiro to fetch.
   */
  where: Prisma.BarbeiroWhereUniqueInput
}

/**
 * Barbeiro findFirst
 */
export type BarbeiroFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Barbeiro
   */
  select?: Prisma.BarbeiroSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Barbeiro
   */
  omit?: Prisma.BarbeiroOmit<ExtArgs> | null
  /**
   * Filter, which Barbeiro to fetch.
   */
  where?: Prisma.BarbeiroWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Barbeiros to fetch.
   */
  orderBy?: Prisma.BarbeiroOrderByWithRelationInput | Prisma.BarbeiroOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Barbeiros.
   */
  cursor?: Prisma.BarbeiroWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Barbeiros from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Barbeiros.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Barbeiros.
   */
  distinct?: Prisma.BarbeiroScalarFieldEnum | Prisma.BarbeiroScalarFieldEnum[]
}

/**
 * Barbeiro findFirstOrThrow
 */
export type BarbeiroFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Barbeiro
   */
  select?: Prisma.BarbeiroSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Barbeiro
   */
  omit?: Prisma.BarbeiroOmit<ExtArgs> | null
  /**
   * Filter, which Barbeiro to fetch.
   */
  where?: Prisma.BarbeiroWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Barbeiros to fetch.
   */
  orderBy?: Prisma.BarbeiroOrderByWithRelationInput | Prisma.BarbeiroOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Barbeiros.
   */
  cursor?: Prisma.BarbeiroWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Barbeiros from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Barbeiros.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Barbeiros.
   */
  distinct?: Prisma.BarbeiroScalarFieldEnum | Prisma.BarbeiroScalarFieldEnum[]
}

/**
 * Barbeiro findMany
 */
export type BarbeiroFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Barbeiro
   */
  select?: Prisma.BarbeiroSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Barbeiro
   */
  omit?: Prisma.BarbeiroOmit<ExtArgs> | null
  /**
   * Filter, which Barbeiros to fetch.
   */
  where?: Prisma.BarbeiroWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Barbeiros to fetch.
   */
  orderBy?: Prisma.BarbeiroOrderByWithRelationInput | Prisma.BarbeiroOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Barbeiros.
   */
  cursor?: Prisma.BarbeiroWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Barbeiros from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Barbeiros.
   */
  skip?: number
  distinct?: Prisma.BarbeiroScalarFieldEnum | Prisma.BarbeiroScalarFieldEnum[]
}

/**
 * Barbeiro create
 */
export type BarbeiroCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Barbeiro
   */
  select?: Prisma.BarbeiroSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Barbeiro
   */
  omit?: Prisma.BarbeiroOmit<ExtArgs> | null
  /**
   * The data needed to create a Barbeiro.
   */
  data: Prisma.XOR<Prisma.BarbeiroCreateInput, Prisma.BarbeiroUncheckedCreateInput>
}

/**
 * Barbeiro createMany
 */
export type BarbeiroCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Barbeiros.
   */
  data: Prisma.BarbeiroCreateManyInput | Prisma.BarbeiroCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Barbeiro createManyAndReturn
 */
export type BarbeiroCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Barbeiro
   */
  select?: Prisma.BarbeiroSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Barbeiro
   */
  omit?: Prisma.BarbeiroOmit<ExtArgs> | null
  /**
   * The data used to create many Barbeiros.
   */
  data: Prisma.BarbeiroCreateManyInput | Prisma.BarbeiroCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Barbeiro update
 */
export type BarbeiroUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Barbeiro
   */
  select?: Prisma.BarbeiroSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Barbeiro
   */
  omit?: Prisma.BarbeiroOmit<ExtArgs> | null
  /**
   * The data needed to update a Barbeiro.
   */
  data: Prisma.XOR<Prisma.BarbeiroUpdateInput, Prisma.BarbeiroUncheckedUpdateInput>
  /**
   * Choose, which Barbeiro to update.
   */
  where: Prisma.BarbeiroWhereUniqueInput
}

/**
 * Barbeiro updateMany
 */
export type BarbeiroUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Barbeiros.
   */
  data: Prisma.XOR<Prisma.BarbeiroUpdateManyMutationInput, Prisma.BarbeiroUncheckedUpdateManyInput>
  /**
   * Filter which Barbeiros to update
   */
  where?: Prisma.BarbeiroWhereInput
  /**
   * Limit how many Barbeiros to update.
   */
  limit?: number
}

/**
 * Barbeiro updateManyAndReturn
 */
export type BarbeiroUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Barbeiro
   */
  select?: Prisma.BarbeiroSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Barbeiro
   */
  omit?: Prisma.BarbeiroOmit<ExtArgs> | null
  /**
   * The data used to update Barbeiros.
   */
  data: Prisma.XOR<Prisma.BarbeiroUpdateManyMutationInput, Prisma.BarbeiroUncheckedUpdateManyInput>
  /**
   * Filter which Barbeiros to update
   */
  where?: Prisma.BarbeiroWhereInput
  /**
   * Limit how many Barbeiros to update.
   */
  limit?: number
}

/**
 * Barbeiro upsert
 */
export type BarbeiroUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Barbeiro
   */
  select?: Prisma.BarbeiroSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Barbeiro
   */
  omit?: Prisma.BarbeiroOmit<ExtArgs> | null
  /**
   * The filter to search for the Barbeiro to update in case it exists.
   */
  where: Prisma.BarbeiroWhereUniqueInput
  /**
   * In case the Barbeiro found by the `where` argument doesn't exist, create a new Barbeiro with this data.
   */
  create: Prisma.XOR<Prisma.BarbeiroCreateInput, Prisma.BarbeiroUncheckedCreateInput>
  /**
   * In case the Barbeiro was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BarbeiroUpdateInput, Prisma.BarbeiroUncheckedUpdateInput>
}

/**
 * Barbeiro delete
 */
export type BarbeiroDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Barbeiro
   */
  select?: Prisma.BarbeiroSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Barbeiro
   */
  omit?: Prisma.BarbeiroOmit<ExtArgs> | null
  /**
   * Filter which Barbeiro to delete.
   */
  where: Prisma.BarbeiroWhereUniqueInput
}

/**
 * Barbeiro deleteMany
 */
export type BarbeiroDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Barbeiros to delete
   */
  where?: Prisma.BarbeiroWhereInput
  /**
   * Limit how many Barbeiros to delete.
   */
  limit?: number
}

/**
 * Barbeiro without action
 */
export type BarbeiroDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Barbeiro
   */
  select?: Prisma.BarbeiroSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Barbeiro
   */
  omit?: Prisma.BarbeiroOmit<ExtArgs> | null
}
